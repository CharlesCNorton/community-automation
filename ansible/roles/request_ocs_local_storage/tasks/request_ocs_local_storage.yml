---
# tasks ocs  install

- name: Install jq
  package: >
    name=jq
    state=latest

- name: Create ocs setup directory
  file:
    path: "{{ ocs_bastion_setup_dir }}"
    state: "directory"
    mode: '0755'

- name: Locating all setup files
  find:
    path: "{{ ocs_bastion_setup_dir }}"
  register: cleanup
  ignore_errors: true

- name: Removing all setup files previously from previous run
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ cleanup.files }}"
  ignore_errors: true

- name: Get ocs version major.minor
  shell: "oc version | grep Server | cut -d ' ' -f3 | cut -d '.' -f1,2"
  register: oc_version

- name: Get number of workers
  shell: "oc get no --no-headers=true | grep worker | cut -f1 -d' ' | wc -l"
  register: num_workers

- name: set fact number of devices
  set_fact:
    num_devices: 2
  when: fyre_ui_build

- name: set fact localstore_version, ocs_channel, and num_pvs
  set_fact:
    localstore_version: "{{ oc_version.stdout }}"
    ocs_channel: "{{ ocs_stable_prefix }}-{{ oc_version.stdout }}"
    num_pvs: "{{ (num_workers.stdout*num_devices|int|abs) }}"

- name: overwrite OCS channel
  set_fact:
    ocs_channel: "{{ ocs_channel_override }}"
  when: ocs_channel_override != ""

- name: set fact namespace and device set
  set_fact:
    local_storage_namespace: openshift-local-storage
    device_set: ocs-deviceset-localblock
  when: oc_version.stdout is version('4.6', '>=')

- name: Generate OCS install files from templates and copy to dest
  template:
    src: "{{ item }}.j2"
    dest: "{{ ocs_bastion_setup_dir }}/{{ item }}"
    mode: '0755'
  with_items:
  - ocs-operator.yaml
  - local-storage-operator.yaml
  - local-volumes.yaml
  - storage-cluster.yaml

- name: Copy OCS scripts to dest
  copy:
    src: files/
    dest: "{{ ocs_bastion_setup_dir }}/"
    mode: '0755'
    force: true

- name: Check for Min CPUs of 48
  shell: "oc get node -o json | jq -r '.items[] | select(.metadata.labels[\"node-role.kubernetes.io/worker\"] != null) | .status.capacity.cpu' | awk '{s+=$1} END {print s}'"
  register: checkcpus

- name: cpu failed message
  fail:
    msg: OCS requires a total of 48 cpus across worker nodes
  when: (checkcpus.stdout|int) < 48

- name: get worker node names
  shell: "oc get nodes | grep worker | cut -f1 -d' '"
  register: node_list

- name: update worker labels
  shell: "oc label node/{{ item }} cluster.ocs.openshift.io/openshift-storage='' --overwrite=true"
  loop: "{{ node_list.stdout_lines }}"

- name: create openshift-storage namespace
  shell:  "oc create namespace openshift-storage; oc project openshift-storage"
  register: ocs_project_results

- name: Apply OCS operator yaml
  shell:  "oc apply -f {{ ocs_bastion_setup_dir }}/ocs-operator.yaml"
  register: ocs_install_results

- name: checking for container storage to be ready
  shell:  "oc get csv -n openshift-storage --no-headers=true"
  register: ocs_csv_results
  until: "'Succeeded' in ocs_csv_results.stdout"
  retries: 60
  delay: 10

- name: create and set local-storage-namespace
  shell:  "oc create namespace {{ local_storage_namespace }}; oc project {{ local_storage_namespace }}"
  register: ocs_project_results

- name: Apply  local storage operator yaml
  shell:  "oc apply -f {{ ocs_bastion_setup_dir }}/local-storage-operator.yaml"
  register: local_storage_install_results

- name: checking for local storage csv
  shell: "oc get csv -n {{ local_storage_namespace }} --no-headers=true"
  register: local_storage_results

- name: checking for container storage to be ready
  shell:  "oc get csv -n {{ local_storage_namespace }} --no-headers=true"
  register: ocs_csv_results
  until: "'Succeeded' in ocs_csv_results.stdout"
  retries: 60
  delay: 10

- name: setting up local volumes on older OCP version
  block:
   - name: Add extra device(s), when clsuter built by fyre UI
     lineinfile:
       path: "{{ ocs_bastion_setup_dir }}/local-volumes.yaml"
       line: "        - {{ ocs_device_2 }}"
     when: fyre_ui_build

   - name: Install local volumes for OCS 4.5 or older
     shell: "oc apply -f {{ ocs_bastion_setup_dir }}/local-volumes.yaml"
     register: localvolumes

   - name: Check for local volumes to be created
     shell: oc get pod -n "{{ local_storage_namespace }}" | grep -E '1/1|2/2|3/3|4/4|5/5|6/6|Completed|NAME'
     register: local_storage_results
     until: local_storage_results.rc ==0
     retries: 30
     delay: 5

   - name: check for local block storage class
     shell: oc get sc localblock -o name | grep "storageclass.storage.k8s.io/localblock"
     register: block_storage_results
     until: block_storage_results.rc ==0
     retries: 30
     delay: 5

  when: oc_version.stdout is version('4.5', '<=')

- name: setup local storage on newer versions of OCP
  block:
   - name: OCS auto discovery of local volumes
     shell: "oc project {{ local_storage_namespace }}; oc apply -f {{ ocs_bastion_setup_dir }}/local-volumes-discovery.yaml"
     register: local_discovery_results

   - name: get number of workers
     shell: "oc get nodes --no-headers=true | grep worker | wc -l"
     register: num_worker_results

   - name: Waiting for discovery pods to start on all worker nodes
     shell: "oc get pod -n {{ local_storage_namespace }} --no-headers=true | grep diskmaker-discovery | grep Running | wc -l"
     register: discovery_pod_results
     until: discovery_pod_results.stdout == num_worker_results.stdout
     retries: 60
     delay: 5

   - name: apply local volumeset yaml
     shell: "oc apply  -f {{ ocs_bastion_setup_dir }}/local-volume-set.yaml"
     register: local_vol_results

   - name: Waiting for pods to start
     shell: "oc get pv -n {{ local_storage_namespace }} --no-headers=true | grep local-pv | grep -E \"Available|Bound\" | wc -l"
     register: pv_results
     until: pv_results.stdout == num_pvs
     retries: 60
     delay: 5

  when: oc_version.stdout is version('4.6', '>=')

- name: Install storagecluster
  shell: "oc apply -f {{ ocs_bastion_setup_dir }}/storage-cluster.yaml"
  register: storageCluster_results

- name: Check for ocs-storagecluster storage class
  shell: "oc get sc --no-headers | cut -f1 -d' ' | grep 'ocs-storagecluster' | wc -l"
  register: sc_results
  until: ( sc_results.stdout|int ) >= 3
  retries: 60
  delay: 10

- name: Set default storageclass to {{ default_sc }}  {{ setdefault }}
  shell: "oc get sc  | grep -e default | cut -f1 -d' ' | tr -s ' '"
  when: setdefault == true
  register: default_storage_results

- name: update default storage class when exist
  shell: oc patch storageclass "{{ default_storage_results.stdout }}" -p '{"metadata":{"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'
  when: default_storage_results.stdout != ""

- name: set default storage when there is no default
  shell: oc patch storageclass "{{ default_sc }}" -p '{"metadata":{"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
  when: default_storage_results.stdout == ""
