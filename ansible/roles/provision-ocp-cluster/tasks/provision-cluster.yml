---
- name: Provisioning OCP cluster...
  when: 'admin_task == "provision"'
  block:
    - name: create clusterdeployment CR based on template
      template:
        src: "{{ cloud }}-template.j2"
        dest: "{{ cloud }}-clusterdeployment-cr.yml"
        backup: true
      register: template_results

    - name: Create Namespace based on cluster name
      shell: "oc create namespace {{ CLUSTER_NAME }}"
      register: ns_results

    - name: Apply provision yaml to ACM/Hive cluster
      shell: "oc apply -f  {{ cloud }}-clusterdeployment-cr.yml"
      register: provision_results

    - name: Get the provisioning pod name
      shell:  "oc --no-headers=true get pods -n {{ CLUSTER_NAME }} -l hive.openshift.io/job-type=provision,hive.openshift.io/cluster-deployment-name={{ CLUSTER_NAME }} -o name | cut -d / -f2"
      register: pro_pod_results
      until: 'pro_pod_results.stdout != ""'
      retries: 10
      delay: 30

    - name: Setting fact variable
      set_fact:
          provision_podname: "{{ pro_pod_results.stdout }}"

    - name: Check for bootstrap complete, wait up to 60 minutes
      shell: "oc logs -n {{ CLUSTER_NAME }} {{ provision_podname }} -c hive"
      register: bootstrap_results
      until: 'bootstrap_results.stdout.find("Bootstrap status: complete") != -1'
      retries: 60
      delay: 60

    - name: Check provisioning progress, waiting up to 60 minutes
      shell: "oc logs -n {{ CLUSTER_NAME }} {{ provision_podname }} -c hive"
      register: monitor_results
      until: 'monitor_results.stdout.find("install completed successfully") != -1'
      retries: 60
      delay: 60

    - name: Change to cluster namespace
      shell: "oc project {{ CLUSTER_NAME }}"

    - name: Get admin password for kubeadmin
      shell: "oc extract secret/$(oc get cd {{ CLUSTER_NAME }} -o jsonpath='{.spec.clusterMetadata.adminPasswordSecretRef.name}') --to=-"
      register: kubeadmin_password
    - debug: msg="{{ kubeadmin_password.stdout }}"

    - name: Get openshift console url
      shell: "oc get cd {{ CLUSTER_NAME }} -o jsonpath='{ .status.webConsoleURL }'"
      register: console_url
    - debug: msg="{{ console_url.stdout }}"

    - name: save install log locally
      shell: "oc logs -n {{ CLUSTER_NAME }} {{ provision_podname }} -c hive > ocp_install.log"

- name: Deleting OCP cluster
  when: 'admin_task == "delete"'
  block:
   - name: Delete cluster
     shell: "oc -n {{ CLUSTER_NAME }} delete clusterdeployment {{ CLUSTER_NAME }} --wait=false"
     register: delete_results

   - name: Check for cluster removal
     shell: "oc --no-headers=true get clusterdeployment {{ CLUSTER_NAME }} -n {{ CLUSTER_NAME }}"
     register: check_cluster_results
     until: 'check_cluster_results.rc != 0'
     retries: 30
     delay: 60
     ignore_errors: yes

   - name: delete namespace when left behind
     shell: "oc delete namespace {{ CLUSTER_NAME }}"
     ignore_errors: yes